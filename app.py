# app.py

import streamlit as st
import google.generativeai as genai

# --- CONFIGURATION DE LA PAGE ---
# CHANG√â : J'ai remplac√© l'emoji par un ic√¥ne "shortcode" plus propre (un avocat)
# et j'ai mis layout="centered" pour que ce soit plus net sur grand √©cran.
st.set_page_config(
    page_title="Assistant Nutrition IA",
    page_icon="ü•ë",
    layout="centered"
)

# --- CONNEXION √Ä L'API GEMINI ---
# (Pas de changement ici, on cache la connexion)
try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
    model = genai.GenerativeModel('gemini-2.5-flash-image') # Le nom de ton mod√®le
except Exception as e:
    # Affiche une erreur claire si la cl√© n'est pas trouv√©e ou si le mod√®le plante
    st.error(f"Erreur de configuration de l'API : {e}")
    st.stop() # Arr√™te l'appli

# --- TITRE DE L'APPLICATION ---
# CHANG√â : J'ai enlev√© l'emoji du titre.
st.title("Assistant Nutrition IA")

# CHANG√â : J'ai remplac√© le "subheader" par un "caption" plus discret et pro.
st.caption("Remplissez vos informations pour g√©n√©rer un plan de repas personnalis√©.")

# CHANG√â : J'ai ajout√© un s√©parateur visuel propre.
st.divider()

# --- CORPS DE L'APPLICATION ---
# (Pas de changement sur la structure des colonnes, elle est ergonomique)
col1, col2, col3 = st.columns(3)

with col1:
    poids = st.number_input("Votre poids (kg)", min_value=30, max_value=200, value=110)
with col2:
    objectif = st.selectbox("Votre objectif", ["Perte de poids", "Maintien", "Prise de masse"])
with col3:
    allergies = st.text_input("Allergies (ex: noix, lactose)", placeholder="Aucune")

# (Le bouton reste le m√™me, `type="primary"` est une bonne pratique)
if st.button("G√©n√©rer mon plan", type="primary"):
    
    with st.spinner("L'IA pr√©pare vos repas..."):
        
        # --- LE PROMPT (L'INSTRUCTION PERSONNALIS√âE) ---
        # CHANG√â : C'est la partie la plus importante !
        # J'ai demand√© √† l'IA de ne PAS utiliser d'emojis.
        prompt = f"""
        Tu es un nutritionniste sportif expert.
        Mon profil est le suivant :
        - Poids actuel : {poids} kg
        - Objectif : {objectif}
        - Allergies : {allergies}

        Ta mission :
        Propose-moi 3 id√©es de repas (Petit-d√©jeuner, D√©jeuner, D√Æner)
        qui soient simples, rapides √† pr√©parer, et adapt√©es √† mon objectif.

        Formatte ta r√©ponse en Markdown de mani√®re tr√®s √©pur√©e et professionnelle.
        - Un titre pour chaque repas (ex: ### Petit-d√©jeuner).
        - Une liste √† puces pour les ingr√©dients.
        - Une courte phrase pour la pr√©paration.
        - **N'ajoute AUCUN emoji, ni dans les titres ni dans le texte.**
        - N'ajoute pas d'introduction ou de conclusion, donne juste les repas.
        """

        # --- APPEL √Ä L'IA ---
        try:
            response = model.generate_content(prompt)
            
            # CHANG√â : J'ai ajout√© un s√©parateur avant la r√©ponse.
            st.divider()
            
            # CHANG√â : J'ai enlev√© l'emoji "üí°" du sous-titre.
            st.subheader("Voici vos suggestions de repas :")
            st.markdown(response.text)
        
        except Exception as e:
            st.error(f"Une erreur est survenue avec l'API : {e}")
